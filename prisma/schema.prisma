// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(cuid())
  email       String       @unique
  name        String?
  image       String?
  points      Int          @default(0)
  submissions Submission[]
  lastSolved  Problem[]
}

model Problem {
  id           Int          @id @default(autoincrement())
  title        String       @unique
  slug         String       @unique
  description  String
  constraints  String
  difficulty   Difficulty   @default(EASY)
  solution     String?
  image        String?
  examples     Example[]
  companies    String[]
  topics       String[]
  boilercode   Json
  testCases    TestCase[]
  submissions  Submission[]
  lastSolver   User?        @relation(fields: [lastSolverId], references: [id])
  lastSolverId String?
}

model TestCase {
  id        String   @id @default(cuid())
  input     Json
  output    String
  Problem   Problem? @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId Int?
}

model Example {
  id          String   @id @default(cuid())
  image       String?
  input       String
  output      String
  explanation String?
  Problem     Problem? @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId   Int?
}

model Submission {
  id        String   @id @default(cuid())
  status    Status
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  Problem   Problem? @relation(fields: [problemId], references: [id])
  problemId Int?
}

enum Status {
  AC
  WA
  RTE
  TLE
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}
